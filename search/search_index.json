{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PySTAC Monty","text":"<p>Python library for working with the SpatioTemporal Asset Catalog (STAC) extension for Montandon.</p>"},{"location":"#overview","title":"Overview","text":"<p>PySTAC Monty is a Python package that implements the Montandon STAC extension, providing tools and utilities for working with disaster and hazard data in STAC catalogs.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Implementation of the Montandon STAC extension</li> <li>Support for various disaster data sources</li> <li>Tools for working with hazard profiles</li> <li>Geocoding capabilities</li> <li>Integration with STAC ecosystem</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Installation Guide</li> <li>Quick Start Guide</li> <li>API Reference</li> <li>GitHub Repository</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the Apache 2.0 License - see the LICENSE file for details.</p>"},{"location":"api/extension/","title":"Extension API Reference","text":""},{"location":"api/extension/#montyextension","title":"MontyExtension","text":"<p>The main extension class that provides Monty-specific functionality to STAC objects.</p> <pre><code>class MontyExtension(Generic[T], PropertiesExtension, ExtensionManagementMixin[Union[pystac.Collection, pystac.Item]])\n</code></pre>"},{"location":"api/extension/#properties","title":"Properties","text":"<ul> <li><code>correlation_id</code> (str): A unique correlation identifier for the event</li> <li><code>country_codes</code> (list[str]): List of ISO 3166-1 alpha-3 country codes</li> <li><code>hazard_codes</code> (list[str] | None): List of hazard codes</li> <li><code>hazard_detail</code> (HazardDetail | None): Details about the hazard</li> <li><code>impact_detail</code> (ImpactDetail | None): Details about the impact</li> <li><code>episode_number</code> (int): Episode number for the event</li> </ul>"},{"location":"api/extension/#methods","title":"Methods","text":""},{"location":"api/extension/#apply","title":"apply","text":"<pre><code>def apply(\n    self,\n    correlation_id: str,\n    country_codes: list[str],\n    hazard_codes: list[str] | None = None,\n) -&gt; None\n</code></pre> <p>Applies Monty Extension properties to the extended STAC object.</p>"},{"location":"api/extension/#compute_and_set_correlation_id","title":"compute_and_set_correlation_id","text":"<pre><code>def compute_and_set_correlation_id(self, hazard_profiles: HazardProfiles) -&gt; None\n</code></pre> <p>Computes and sets the correlation ID using the provided hazard profiles.</p>"},{"location":"api/extension/#ext","title":"ext","text":"<pre><code>@classmethod\ndef ext(cls, obj: T, add_if_missing: bool = False) -&gt; MontyExtension[T]\n</code></pre> <p>Creates an extension instance from a STAC object.</p>"},{"location":"api/extension/#hazarddetail","title":"HazardDetail","text":"<p>Class representing hazard details.</p> <pre><code>class HazardDetail\n</code></pre>"},{"location":"api/extension/#properties_1","title":"Properties","text":"<ul> <li><code>cluster</code> (str): The cluster of the hazard</li> <li><code>severity_value</code> (float): The maximum value of the hazard</li> <li><code>severity_unit</code> (str): The unit of the maximum value</li> <li><code>severity_label</code> (str): The label of the severity</li> <li><code>estimate_type</code> (MontyEstimateType): The type of estimate</li> </ul>"},{"location":"api/extension/#impactdetail","title":"ImpactDetail","text":"<p>Class representing impact details.</p> <pre><code>class ImpactDetail\n</code></pre>"},{"location":"api/extension/#properties_2","title":"Properties","text":"<ul> <li><code>category</code> (MontyImpactExposureCategory): The impact category</li> <li><code>type</code> (MontyImpactType): The type of impact</li> <li><code>value</code> (float): The impact value</li> <li><code>unit</code> (str): The unit of measurement</li> <li><code>estimate_type</code> (MontyEstimateType): The type of estimate</li> </ul>"},{"location":"api/extension/#enums","title":"Enums","text":""},{"location":"api/extension/#montyroles","title":"MontyRoles","text":"<pre><code>class MontyRoles(StringEnum):\n    EVENT = \"event\"\n    REFERENCE = \"reference\"\n    SOURCE = \"source\"\n    HAZARD = \"hazard\"\n    IMPACT = \"impact\"\n    RESPONSE = \"response\"\n</code></pre>"},{"location":"api/extension/#montyestimatetype","title":"MontyEstimateType","text":"<pre><code>class MontyEstimateType(StringEnum):\n    PRIMARY = \"primary\"\n    SECONDARY = \"secondary\"\n    MODELLED = \"modelled\"\n</code></pre>"},{"location":"api/extension/#montyimpactexposurecategory","title":"MontyImpactExposureCategory","text":"<p>Defines categories for impact exposure. Some key values include:</p> <pre><code>class MontyImpactExposureCategory(StringEnum):\n    ALL_PEOPLE = \"allpeop\"\n    CROP = \"crop\"\n    BUILDINGS = \"build\"\n    HOSPITALS = \"hosp\"\n    EDUCATION_CENTERS = \"educ\"\n    # ... and many more\n</code></pre>"},{"location":"api/extension/#montyimpacttype","title":"MontyImpactType","text":"<p>Defines types of impacts. Some key values include:</p> <pre><code>class MontyImpactType(StringEnum):\n    UNDEFINED = \"unspec\"\n    DAMAGED = \"dama\"\n    DESTROYED = \"dest\"\n    DEATHS = \"deat\"\n    MISSING = \"miss\"\n    INJURED = \"inju\"\n    # ... and many more\n</code></pre>"},{"location":"api/extension/#constants","title":"Constants","text":"<ul> <li><code>SCHEMA_URI</code>: The URI of the Monty extension schema</li> <li><code>PREFIX</code>: The prefix used for Monty extension properties (\"monty:\")</li> </ul>"},{"location":"api/sources/","title":"Sources API Reference","text":"<p>The sources module provides implementations for different data sources that can be used with the Monty extension.</p>"},{"location":"api/sources/#available-sources","title":"Available Sources","text":"<ul> <li>Common - Base functionality shared across all sources</li> <li>GLIDE - GLobal IDEntifier number support</li> <li>GDACS - Global Disaster Alert and Coordination System integration</li> <li>EMDAT - Emergency Events Database integration</li> <li>USGS - United States Geological Survey integration</li> </ul>"},{"location":"api/sources/common/","title":"Common","text":"<p>The common module provides shared functionality for all sources.</p> <pre><code>from pystac_monty.sources.common import BaseTransformer, MontyDataSource\n</code></pre>"},{"location":"api/sources/common/#basetransformer","title":"BaseTransformer","text":"<p>Base class for all source transformers. Transformers are responsible for converting source data into STAC Items. Each data source (like GLIDE, GDACS, etc.) should implement its own transformer by inheriting from this base class.</p>"},{"location":"api/sources/common/#implementing-a-new-transformer","title":"Implementing a New Transformer","text":"<p>To implement a new transformer for a data source:</p> <ol> <li>Create a new class that inherits from <code>BaseTransformer</code></li> <li>Implement the <code>transform</code> method that converts source data into STAC Items</li> <li>Handle data validation and transformation according to your source's format</li> </ol> <p>Example implementation:</p> <pre><code>class MySourceTransformer(BaseTransformer):\n    def __init__(self, data: MontyDataSource):\n        self.data = data\n\n    def transform(self, data: Any) -&gt; pystac.Item:\n        # Validate input data\n        if not self._validate_data(data):\n            raise ValueError(\"Invalid data format\")\n\n        # Transform data into STAC Item\n        item = pystac.Item(\n            id=\"unique-id\",\n            geometry=self._extract_geometry(data),\n            bbox=self._extract_bbox(data),\n            datetime=self._extract_datetime(data),\n            properties=self._extract_properties(data)\n        )\n\n        # Add any extensions or additional metadata\n        return item\n</code></pre>"},{"location":"api/sources/common/#data-input-pattern","title":"Data Input Pattern","text":"<p>Data is passed to transformers using the <code>MontyDataSource</code> class, which encapsulates:</p> <ul> <li><code>source_url</code>: The URL or identifier of where the data came from</li> <li><code>data</code>: The actual data to be transformed (can be any type)</li> </ul> <p>Example usage:</p> <pre><code>source = MontyDataSource(\n    source_url=\"https://api.example.com/data\",\n    data=raw_data\n)\ntransformer = MySourceTransformer(source)\nstac_items = transformer.transform(source.get_data())\n</code></pre> <p>The <code>MontyDataSource</code> class provides a consistent interface for handling different types of input data while maintaining source information. This pattern allows transformers to:</p> <ol> <li>Access both the raw data and its source information</li> <li>Track data provenance</li> <li>Handle different data formats consistently</li> </ol>"},{"location":"api/sources/common/#key-methods","title":"Key Methods","text":"<p>When implementing a transformer, consider implementing these key methods:</p> <ul> <li><code>transform()</code>: The main method that converts source data into STAC Items</li> <li>Data validation methods to ensure input data meets requirements</li> <li>Helper methods for extracting specific STAC Item components (geometry, datetime, properties)</li> <li>Methods for handling source-specific data formats or requirements</li> </ul> <p>The transformer should handle:</p> <ul> <li>Data validation and error checking</li> <li>Conversion of source data format to STAC Items</li> <li>Addition of any required extensions or metadata</li> <li>Proper handling of source URLs and data provenance</li> </ul>"},{"location":"api/sources/emdat/","title":"EMDAT","text":"<p>The EMDAT (Emergency Events Database) module provides functionality for working with EM-DAT data. Full Specification of the transformation can be found here.</p> <pre><code>from pystac_monty.sources.emdat import EMDATTransformer, EMDATDataSource\n</code></pre>"},{"location":"api/sources/emdat/#emdatdatasource","title":"EMDATDataSource","text":"<p>The <code>EMDATDataSource</code> class handles EM-DAT data input in either Excel format or as a pandas DataFrame.</p> <pre><code>class EMDATDataSource(MontyDataSource):\n    \"\"\"\n    EM-DAT data source that can handle both Excel files and pandas DataFrames.\n\n    Args:\n        source_url: URL of the data source\n        data: Either Excel content as string or pandas DataFrame containing EM-DAT data\n    \"\"\"\n</code></pre>"},{"location":"api/sources/emdat/#emdattransformer","title":"EMDATTransformer","text":"<p>The <code>EMDATTransformer</code> class transforms EM-DAT data into STAC Items with the Monty extension.</p> <pre><code>class EMDATTransformer:\n    \"\"\"\n    Transforms EM-DAT data into STAC Items with Monty extension.\n\n    Args:\n        data: EMDATDataSource containing the EM-DAT data\n        geocoder: Optional GAULGeocoder instance for enhanced location handling\n    \"\"\"\n</code></pre> <p>A geocoder is needed to handle location data in the EM-DAT data. The <code>GAULGeocoder</code> class is provided for this purpose. It is designed to work with the Global Administrative Unit Layers (GAUL) dataset as described in the EMDAT tutorial: Making Maps</p> <pre><code>from pystac_monty.geocoding import GAULGeocoder\n\ngeocoder = GAULGeocoder(\"path/to/gaul.gpkg\")\n</code></pre>"},{"location":"api/sources/emdat/#output-stac-items","title":"Output STAC Items","text":"<p>The transformer creates three types of STAC Items:</p> <ol> <li>Event Items (<code>emdat-event-*</code>)</li> <li>Basic event information including location and dates</li> <li> <p>Monty extension with hazard codes and country codes</p> </li> <li> <p>Hazard Items (<code>emdat-hazard-*</code>)</p> </li> <li>Derived from event items</li> <li> <p>Additional hazard details including severity and classification</p> </li> <li> <p>Impact Items (<code>emdat-impact-*</code>)</p> </li> <li>Created for each impact metric</li> <li>Includes detailed impact information with type, value, and units</li> </ol>"},{"location":"api/sources/emdat/#example-usage","title":"Example Usage","text":"<p>```python from pystac_monty.sources.emdat import EMDATTransformer, EMDATDataSource from pystac_monty.geocoding import GAULGeocoder</p>"},{"location":"api/sources/emdat/#create-data-source-from-excel-file","title":"Create data source from Excel file","text":"<p>data = EMDATDataSource(     source_url=\"https://public.emdat.be\",     data=\"path/to/emdat_data.xlsx\" )</p>"},{"location":"api/sources/emdat/#initialize-geocoder-optional","title":"Initialize geocoder (optional)","text":"<p>geocoder = GAULGeocoder(\"path/to/gaul.gpkg\")</p>"},{"location":"api/sources/emdat/#create-transformer","title":"Create transformer","text":"<p>transformer = EMDATTransformer(data, geocoder)</p>"},{"location":"api/sources/emdat/#generate-stac-items","title":"Generate STAC items","text":"<p>items = transformer.make_items()</p>"},{"location":"api/sources/emdat/#or-generate-specific-types-of-items","title":"Or generate specific types of items","text":"<p>event_items = transformer.make_source_event_items() hazard_items = transformer.make_hazard_event_items() impact_items = transformer.make_impact_items()</p>"},{"location":"api/sources/gdacs/","title":"GDACS","text":"<p>The GDACS (Global Disaster Alert and Coordination System) module provides functionality for working with GDACS data.</p>"},{"location":"api/sources/gdacs/#usage-example","title":"Usage Example","text":"<p>Here's a complete example showing how to transform GDACS data into STAC Items:</p> <pre><code>import requests\nfrom pystac_monty.sources.gdacs import GDACSTransformer, GDACSDataSource, GDACSDataSourceType\n\n# 1. Fetch GDACS data\n# We need both event data and geometry data\nevent_url = \"https://www.gdacs.org/gdacsapi/api/events/geteventdata?eventtype=FL&amp;eventid=1102983&amp;episodeid=1\"\ngeometry_url = \"https://www.gdacs.org/gdacsapi/api/polygons/getgeometry?eventtype=FL&amp;eventid=1102983&amp;episodeid=1\"\n\n# Create GDACS data sources\ngdacs_data_sources = [\n    GDACSDataSource(\n        event_url,\n        requests.get(event_url).text,\n        GDACSDataSourceType.EVENT\n    ),\n    GDACSDataSource(\n        geometry_url,\n        requests.get(geometry_url).text,\n        GDACSDataSourceType.GEOMETRY\n    )\n]\n\n# 2. Create transformer and transform data\ntransformer = GDACSTransformer(gdacs_data_sources)\nitems = transformer.make_items()\n\n# 3. The transformer creates three types of STAC items:\n# - Source event item\n# - Hazard event item\n# - Impact items (from Sendai indicators if present)\n\n# Example: Print details of each item\nfor item in items:\n    print(f\"\\nItem ID: {item.id}\")\n    print(f\"Type: {item.properties['roles']}\")\n\n    # Access Monty extension fields\n    monty = MontyExtension.ext(item)\n    if monty.is_source_event():\n        print(\"Event Details:\")\n        print(f\"  Episode Number: {monty.episode_number}\")\n        print(f\"  Hazard Codes: {monty.hazard_codes}\")\n        print(f\"  Country Codes: {monty.country_codes}\")\n    elif monty.is_source_hazard():\n        print(\"Hazard Details:\")\n        print(f\"  Severity: {monty.hazard_detail.severity_value} {monty.hazard_detail.severity_unit}\")\n        print(f\"  Label: {monty.hazard_detail.severity_label}\")\n    elif monty.is_source_impact():\n        print(\"Impact Details:\")\n        print(f\"  Category: {monty.impact_detail.category}\")\n        print(f\"  Type: {monty.impact_detail.type}\")\n        print(f\"  Value: {monty.impact_detail.value} {monty.impact_detail.unit}\")\n</code></pre>"},{"location":"api/sources/gdacs/#example-output","title":"Example Output","text":"<p>The transformed items will look like this:</p> <pre><code>{\n  \"type\": \"Feature\",\n  \"stac_version\": \"1.0.0\",\n  \"id\": \"gdacs-event-1102983-1\",\n  \"properties\": {\n    \"title\": \"Flood in Spain\",\n    \"description\": \"A severe flood event affected parts of Spain...\",\n    \"start_datetime\": \"2023-09-03T00:00:00Z\",\n    \"end_datetime\": \"2023-09-04T00:00:00Z\",\n    \"roles\": [\"source\", \"event\"],\n    \"monty:episode_number\": 1,\n    \"monty:hazard_codes\": [\"FL\"],\n    \"monty:country_codes\": [\"ESP\"]\n  },\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [-0.48, 38.34]\n  },\n  \"links\": [...],\n  \"assets\": {\n    \"icon\": {\n      \"href\": \"https://www.gdacs.org/images/gdacs_icons/FL_red_arrow.png\",\n      \"title\": \"Icon\"\n    },\n    \"report\": {\n      \"href\": \"https://www.gdacs.org/report.aspx?eventtype=FL&amp;eventid=1102983\",\n      \"title\": \"Report\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/sources/gdacs/#gdacstransformer","title":"GDACSTransformer","text":"<p>The GDACSTransformer class handles the transformation of GDACS data into STAC Items with the Monty extension.</p> <pre><code>class GDACSTransformer:\n    \"\"\"\n    Transforms GDACS event data into STAC Items.\n    Requires both event data and geometry data from GDACS API.\n    \"\"\"\n    def __init__(self, data: list[GDACSDataSource]) -&gt; None:\n        \"\"\"\n        Initialize transformer with GDACS data sources.\n\n        Args:\n            data: List of GDACSDataSource objects containing event and geometry data\n        \"\"\"\n\n    def make_items(self) -&gt; list[Item]:\n        \"\"\"\n        Transform GDACS data into STAC Items.\n        Creates source event, hazard, and impact items.\n\n        Returns:\n            list[Item]: List of STAC Items with Monty extension\n        \"\"\"\n</code></pre> <p>The transformer requires two types of GDACS data:</p> <ol> <li>Event data (<code>GDACSDataSourceType.EVENT</code>): Basic event information including location, dates, and impact data</li> <li>Geometry data (<code>GDACSDataSourceType.GEOMETRY</code>): Detailed geometry information for hazard extent</li> </ol> <p>For each GDACS event, the transformer creates:</p> <ol> <li>A source event item containing basic event information</li> <li>A hazard item containing severity and extent information</li> <li>Zero or more impact items containing Sendai indicator data if available</li> </ol> <p>Each item includes the Monty extension fields appropriate for its type.</p>"},{"location":"api/sources/glide/","title":"GLIDE","text":"<p>The GLIDE (GLobal IDEntifier) module provides functionality for working with GLIDE numbers and transforming GLIDE event data into STAC Items.</p>"},{"location":"api/sources/glide/#overview","title":"Overview","text":"<p>GLIDE numbers are unique identifiers for disasters that follow the format: <code>[XX]-[YYYY]-[NNNNN]-[CCC]</code> where:</p> <ul> <li><code>XX</code> is the disaster type (e.g., FL for flood)</li> <li><code>YYYY</code> is the year</li> <li><code>NNNNN</code> is a sequence number</li> <li><code>CCC</code> is the ISO country code</li> </ul>"},{"location":"api/sources/glide/#usage","title":"Usage","text":"<pre><code>import requests\nfrom pystac_monty.sources.glide import GlideTransformer, GlideDataSource\n\n# Fetch GLIDE data\nurl = \"https://www.glidenumber.net/glide/jsonglideset.jsp?level1=ESP&amp;fromyear=2024&amp;toyear=2024&amp;events=FL&amp;number=2024-000199\"\nresponse = requests.get(url)\ndata = GlideDataSource(url, response.text)\n\n# Transform to STAC Items\ntransformer = GlideTransformer(data)\nitems = transformer.make_items()\n\n# The transformer creates two types of items:\n# 1. Source event items (with roles=['source', 'event'])\n# 2. Hazard event items (with roles=['source', 'hazard'])\n\n# Access the items\nfor item in items:\n    print(f\"Item ID: {item.id}\")\n    print(f\"Roles: {item.properties['roles']}\")\n    print(f\"Datetime: {item.datetime}\")\n    print(f\"Location: {item.geometry}\")\n\n    # Access Monty extension data\n    monty = MontyExtension.ext(item)\n    print(f\"Hazard codes: {monty.hazard_codes}\")\n    print(f\"Country codes: {monty.country_codes}\")\n\n    if 'hazard' in item.properties['roles']:\n        print(f\"Hazard detail: {monty.hazard_detail}\")\n</code></pre>"},{"location":"api/sources/glide/#example-output","title":"Example Output","text":"<p>For a flood event in Spain (FL-2024-000199-ESP), the transformer creates:</p> <pre><code># Source Event Item\n{\n    \"type\": \"Feature\",\n    \"stac_version\": \"1.0.0\",\n    \"id\": \"glide-event-FL-2024-000199-ESP\",\n    \"properties\": {\n        \"datetime\": \"2024-10-27T00:00:00Z\",\n        \"title\": \"\",\n        \"description\": \"GDACS - Medium humanitarian impact in for Spain.According to the authorities (CENEM), as of 30 October at 14.00 UTC , the number of deaths stands at 62 in the Autonomous Region of Valencia (eastern Spain), with an undetermined number of missing in Autonomous Region of Valencia, in Albacete province in Castilla La Mancha autonomous Region. Dozens have been rescued and several have been displaced in Valencia province. In addition, a bridge collapsed in Ribarroja del Turia (Valencia province), several roads have been closed, including some in Granada and Malaga cities in the Andalucia region, and train disruptions have been recorded in the affected area.\",\n        \"magnitude\": \"0\",\n        \"source\": \"GDACS\",\n        \"docid\": 23388,\n        \"status\": \"A\",\n        \"roles\": [\"source\", \"event\"],\n        \"monty:hazard_codes\": [\"FL\"],\n        \"monty:country_codes\": [\"ESP\"],\n        \"monty:episode_number\": 1,\n        \"monty:corr_id\": \"20241027-ESP-FL-1-GCDB\"\n    },\n    \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-3.41102534556838, 38.6013316868745]\n    },\n    \"links\": [\n        {\n            \"rel\": \"via\",\n            \"href\": \"https://www.glidenumber.net/glide/jsonglideset.jsp?...\",\n            \"type\": \"application/json\",\n            \"title\": \"Glide Event Data\"\n        }\n    ],\n    \"assets\": {\n        \"report\": {\n            \"href\": \"https://www.glidenumber.net/glide/public/search/details.jsp?glide=23388\",\n            \"type\": \"application/json\",\n            \"title\": \"Report\"\n        }\n    }\n}\n\n# Hazard Event Item\n{\n    \"type\": \"Feature\",\n    \"stac_version\": \"1.0.0\",\n    \"stac_extensions\": [\n        \"https://ifrcgo.github.io/monty/v0.1.0/schema.json\"\n    ],\n    \"id\": \"glide-hazard-FL-2024-000199-ESP\",\n    \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-3.41102534556838, 38.6013316868745]\n    },\n    \"properties\": {\n        \"datetime\": \"2024-10-27T00:00:00Z\",\n        \"title\": \"\",\n        \"description\": \"GDACS - Medium humanitarian impact in for Spain.According to the authorities (CENEM), as of 30 October at 14.00 UTC , the number of deaths stands at 62 in the Autonomous Region of Valencia (eastern Spain), with an undetermined number of missing in Autonomous Region of Valencia, in Albacete province in Castilla La Mancha autonomous Region...\",\n        \"magnitude\": \"0\",\n        \"source\": \"GDACS\",\n        \"docid\": 23388,\n        \"status\": \"A\",\n        \"roles\": [\"source\", \"hazard\"],\n        \"monty:episode_number\": 1,\n        \"monty:hazard_codes\": [\"FL\"],\n        \"monty:country_codes\": [\"ESP\"],\n        \"monty:corr_id\": \"20241027-ESP-FL-1-GCDB\",\n        \"monty:hazard_detail\": {\n            \"cluster\": \"FL\",\n            \"severity_unit\": \"glide\",\n            \"estimate_type\": \"primary\"\n        }\n    },\n    \"links\": [\n        {\n            \"rel\": \"via\",\n            \"href\": \"https://www.glidenumber.net/glide/jsonglideset.jsp?level1=ESP&amp;fromyear=2024&amp;toyear=2024&amp;events=FL&amp;number=2024-000199\",\n            \"type\": \"application/json\",\n            \"title\": \"Glide Event Data\"\n        }\n    ],\n    \"assets\": {\n        \"report\": {\n            \"href\": \"https://www.glidenumber.net/glide/public/search/details.jsp?glide=23388\",\n            \"type\": \"application/json\",\n            \"title\": \"Report\"\n        }\n    }\n}\n</code></pre>"},{"location":"api/sources/glide/#api-reference","title":"API Reference","text":""},{"location":"api/sources/glide/#glidetransformer","title":"GlideTransformer","text":"<pre><code>class GlideTransformer:\n    \"\"\"\n    Transforms GLIDE event data into STAC Items with Monty extension.\n\n    The transformer creates two types of items for each GLIDE event:\n    1. Source event items - Basic event information\n    2. Hazard event items - Event information with hazard details\n    \"\"\"\n\n    def make_items(self) -&gt; list[Item]:\n        \"\"\"\n        Create both source and hazard items for the GLIDE event.\n\n        Returns:\n            list[Item]: List of STAC Items with Monty extension\n        \"\"\"\n\n    def make_source_event_items(self) -&gt; List[Item]:\n        \"\"\"\n        Create source event items.\n\n        Returns:\n            List[Item]: List of source event STAC Items\n        \"\"\"\n\n    def make_hazard_event_items(self) -&gt; List[Item]:\n        \"\"\"\n        Create hazard event items.\n\n        Returns:\n            List[Item]: List of hazard event STAC Items\n        \"\"\"\n</code></pre>"},{"location":"api/sources/glide/#glidedatasource","title":"GlideDataSource","text":"<pre><code>class GlideDataSource(MontyDataSource):\n    \"\"\"\n    Wrapper for GLIDE JSON data from glidenumber.net\n\n    Args:\n        source_url: URL of the GLIDE data source\n        data: JSON response from the GLIDE API\n    \"\"\"\n</code></pre>"},{"location":"api/sources/usgs/","title":"USGS","text":"<p>The USGS (United States Geological Survey) module provides functionality for working with USGS Earthquake Catalog data. The module handles event details, ShakeMap hazard data, and PAGER impact estimates.</p>"},{"location":"api/sources/usgs/#usage-example","title":"Usage Example","text":"<p>Here's a complete example showing how to transform USGS earthquake data into STAC Items:</p> <pre><code>import requests\nfrom pystac_monty.sources.usgs import USGSTransformer, USGSDataSource\n\n# 1. Fetch USGS data\n# We need both event data and optional losses data\nevent_url = \"https://earthquake.usgs.gov/earthquakes/feed/v1.0/detail/us6000pi9w.geojson\"\nlosses_url = \"https://earthquake.usgs.gov/product/losspager/us6000pi9w/json/losses.json\"\n\nevent_data = requests.get(event_url).text\nlosses_data = requests.get(losses_url).text  # Optional\n\n# 2. Create USGS data source\ndata_source = USGSDataSource(\n    source_url=event_url,\n    data=event_data,\n    losses_data=losses_data  # Optional - if not provided, no impact items created\n)\n\n# 3. Create transformer and transform data\ntransformer = USGSTransformer(data_source)\nitems = transformer.make_items()\n\n# 4. The transformer creates three types of STAC items:\n# - Source event item\n# - Hazard item from ShakeMap\n# - Impact items from PAGER data (if losses data provided)\n\n# Example: Print details of each item\nfor item in items:\n    print(f\"\\nItem ID: {item.id}\")\n    print(f\"Type: {item.properties['roles']}\")\n\n    # Access Monty extension fields\n    monty = MontyExtension.ext(item)\n    if monty.is_source_event():\n        print(\"Event Details:\")\n        print(f\"  Episode Number: {monty.episode_number}\")\n        print(f\"  Hazard Codes: {monty.hazard_codes}\")\n        print(f\"  Earthquake Magnitude: {item.properties['eq:magnitude']} {item.properties['eq:magnitude_type']}\")\n    elif monty.is_source_hazard():\n        print(\"Hazard Details:\")\n        print(f\"  Severity: {monty.hazard_detail.severity_value} {monty.hazard_detail.severity_unit}\")\n    elif monty.is_source_impact():\n        print(\"Impact Details:\")\n        print(f\"  Category: {monty.impact_detail.category}\")\n        print(f\"  Type: {monty.impact_detail.type}\")\n        print(f\"  Value: {monty.impact_detail.value} {monty.impact_detail.unit}\")\n</code></pre>"},{"location":"api/sources/usgs/#example-output","title":"Example Output","text":"<p>The transformer will create STAC items like this:</p> <pre><code>{\n  \"type\": \"Feature\",\n  \"stac_version\": \"1.0.0\",\n  \"stac_extensions\": [\n    \"https://ifrcgo.github.io/monty/v0.1.0/schema.json\",\n    \"https://stac-extensions.github.io/earthquake/v1.0.0/schema.json\"\n  ],\n  \"id\": \"usgs-event-us6000pi9w\",\n  \"properties\": {\n    \"title\": \"M 7.1 - Southern Tibetan Plateau\",\n    \"description\": \"Ground motion and intensity map for M7.1 earthquake\",\n    \"datetime\": \"2025-01-07T01:05:16Z\",\n    \"roles\": [\"source\", \"event\"],\n    \"monty:episode_number\": 1,\n    \"monty:hazard_codes\": [\"GH0004\"],\n    \"monty:country_codes\": [\"CHN\"],\n    \"eq:magnitude\": 7.1,\n    \"eq:magnitude_type\": \"mww\",\n    \"eq:depth\": 10,\n    \"eq:status\": \"reviewed\",\n    \"eq:tsunami\": false\n  },\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [87.3608, 28.639]\n  },\n  \"links\": [...],\n  \"assets\": {\n    \"source\": {\n      \"href\": \"https://earthquake.usgs.gov/earthquakes/feed/v1.0/detail/us6000pi9w.geojson\",\n      \"type\": \"application/geo+json\",\n      \"title\": \"USGS GeoJSON Source\"\n    }\n  }\n}\n</code></pre>"},{"location":"api/sources/usgs/#usgstransformer","title":"USGSTransformer","text":"<p>The USGSTransformer class handles transformation of USGS earthquake data into STAC Items with the Monty extension.</p> <pre><code>class USGSTransformer:\n    \"\"\"\n    Transforms USGS earthquake data into STAC Items.\n    Creates event, hazard (ShakeMap), and impact (PAGER) items.\n    \"\"\"\n    def __init__(self, data: USGSDataSource) -&gt; None:\n        \"\"\"\n        Initialize transformer with USGS data source.\n\n        Args:\n            data: USGSDataSource containing event data and optional losses data\n        \"\"\"\n\n    def make_items(self) -&gt; list[Item]:\n        \"\"\"\n        Transform USGS data into STAC Items.\n        Creates source event, hazard, and impact items if losses data available.\n\n        Returns:\n            list[Item]: List of STAC Items with Monty extension\n        \"\"\"\n</code></pre> <p>The transformer creates three types of items:</p> <ol> <li>Event item from basic earthquake data including:</li> <li>Location, magnitude, depth</li> <li>Event metadata and timestamps</li> <li>Links to additional USGS resources</li> <li> <p>Earthquake extension fields (eq:magnitude, eq:depth, etc.)</p> </li> <li> <p>Hazard item from ShakeMap data including:</p> </li> <li>Ground motion intensity information</li> <li>ShakeMap assets (intensity maps, contours, grids)</li> <li> <p>Hazard severity details</p> </li> <li> <p>Impact items from PAGER data (if provided) including:</p> </li> <li>Estimated fatalities</li> <li>Estimated economic losses</li> <li>Impact type, category and value</li> <li>PAGER-specific assets</li> </ol>"},{"location":"api/sources/usgs/#usgsdatasource","title":"USGSDataSource","text":"<p>Wrapper class for USGS data that handles both event data and optional losses data.</p> <pre><code>class USGSDataSource(MontyDataSource):\n    \"\"\"\n    USGS data source that can handle both event detail and losses data.\n\n    Args:\n        source_url: URL where the event data was retrieved from\n        data: Event detail data as JSON string\n        losses_data: Optional PAGER losses data as JSON string\n    \"\"\"\n    def __init__(self, source_url: str, data: str, losses_data: Optional[str] = None):\n        super().__init__(source_url, data)\n        self.data = json.loads(data)\n        self.losses_data = json.loads(losses_data) if losses_data else None\n\n    def get_data(self) -&gt; dict:\n        \"\"\"Get the event detail data.\"\"\"\n        return self.data\n\n    def get_losses_data(self) -&gt; Optional[dict]:\n        \"\"\"Get the PAGER losses data if available.\"\"\"\n        return self.losses_data\n</code></pre> <p>The data source handles: - GeoJSON event data from USGS detail API - Optional PAGER losses data in JSON format - Automatic JSON parsing and validation - Access to both event and losses data through clean interface</p>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>Python &gt;= 3.10</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#using-pip","title":"Using pip","text":"<pre><code>pip install pystac-monty\n</code></pre>"},{"location":"getting-started/installation/#from-source","title":"From Source","text":"<p>To install the latest development version directly from GitHub:</p> <pre><code>git clone https://github.com/IFRCGo/monty-stac-extension.git\ncd monty-stac-extension\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#dependencies","title":"Dependencies","text":"<p>PySTAC Monty requires the following Python packages:</p> <ul> <li>python-dateutil &gt;= 2.7.0</li> <li>pystac &gt;= 1.11.0</li> <li>geojson &gt;= 2.5.0</li> <li>markdownify &gt;= 0.14.1</li> <li>pytz &gt;= 2021.1</li> <li>pandas &gt;= 2.2.0</li> <li>shapely &gt;= 2.0.0</li> </ul> <p>These dependencies will be automatically installed when you install PySTAC Monty.</p>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<p>For development, you might want to install additional dependencies:</p> <pre><code>pip install -e \".[dev]\"\n</code></pre> <p>This will install development dependencies including: - Testing tools (pytest, coverage) - Code quality tools (ruff, mypy) - Documentation tools (mkdocs)</p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you get started with PySTAC Monty, showing you how to use the extension with STAC Items and Collections.</p>"},{"location":"getting-started/quickstart/#basic-usage","title":"Basic Usage","text":"<pre><code>import pystac\nfrom pystac_monty import MontyExtension, MontyRoles, HazardDetail, ImpactDetail\nfrom pystac_monty.hazard_profiles import HazardProfiles\n\n# Enable the extension\nMontyExtension.enable_extension()\n\n# Create a STAC Item\nitem = pystac.Item(\n    id=\"example-event\",\n    geometry=None,\n    bbox=None,\n    datetime=None,\n    properties={\n        \"roles\": [MontyRoles.EVENT, MontyRoles.SOURCE]\n    }\n)\n\n# Add the extension to the item\nmonty_ext = MontyExtension.ext(item, add_if_missing=True)\n\n# Set basic properties\nmonty_ext.apply(\n    correlation_id=\"2024-cyclone-01\",\n    country_codes=[\"FJI\"],  # Fiji\n    hazard_codes=[\"TC\"]     # Tropical Cyclone\n)\n\n# Add hazard details\nhazard_detail = HazardDetail(\n    cluster=\"TC\",\n    severity_value=150.0,\n    severity_unit=\"km/h\",\n    severity_label=\"Category 4\"\n)\nmonty_ext.hazard_detail = hazard_detail\n\n# Add impact details\nimpact_detail = ImpactDetail(\n    category=\"allpeop\",  # All People\n    type=\"affe\",        # Affected\n    value=10000,\n    unit=\"people\"\n)\nmonty_ext.impact_detail = impact_detail\n\n# Compute correlation ID using hazard profiles\nhazard_profiles = HazardProfiles()\nmonty_ext.compute_and_set_correlation_id(hazard_profiles)\n\n# Check if item is a source event\nis_source = monty_ext.is_source_event()  # True\n</code></pre>"},{"location":"getting-started/quickstart/#working-with-collections","title":"Working with Collections","text":"<p>You can also use the extension with STAC Collections:</p> <pre><code># Create a STAC Collection\ncollection = pystac.Collection(\n    id=\"disaster-events\",\n    description=\"Collection of disaster events\",\n    extent=pystac.Extent(\n        spatial=pystac.SpatialExtent([[0, 0, 1, 1]]),\n        temporal=pystac.TemporalExtent([[None, None]])\n    )\n)\n\n# Add the extension to the collection\nmonty_ext = MontyExtension.ext(collection, add_if_missing=True)\n\n# Set collection properties\nmonty_ext.apply(\n    correlation_id=\"2024-events\",\n    country_codes=[\"FJI\", \"VUT\"],  # Fiji and Vanuatu\n    hazard_codes=[\"TC\", \"FL\"]      # Tropical Cyclone and Flood\n)\n</code></pre>"},{"location":"getting-started/quickstart/#extension-properties","title":"Extension Properties","text":"<p>The Monty extension provides several properties:</p> <ul> <li><code>correlation_id</code>: Unique identifier for the event</li> <li><code>country_codes</code>: List of ISO 3166-1 alpha-3 country codes</li> <li><code>hazard_codes</code>: List of hazard codes</li> <li><code>hazard_detail</code>: Details about the hazard (severity, units, etc.)</li> <li><code>impact_detail</code>: Details about the impact (category, type, value, etc.)</li> <li><code>episode_number</code>: Episode number for the event</li> </ul>"},{"location":"getting-started/quickstart/#roles","title":"Roles","text":"<p>The extension defines several roles that can be used to classify items:</p> <ul> <li><code>MontyRoles.EVENT</code>: Represents an event</li> <li><code>MontyRoles.REFERENCE</code>: Reference data</li> <li><code>MontyRoles.SOURCE</code>: Source data</li> <li><code>MontyRoles.HAZARD</code>: Hazard data</li> <li><code>MontyRoles.IMPACT</code>: Impact data</li> <li><code>MontyRoles.RESPONSE</code>: Response data</li> </ul>"},{"location":"getting-started/quickstart/#helper-methods","title":"Helper Methods","text":"<p>The extension provides helper methods to check item types:</p> <p>```python</p>"},{"location":"getting-started/quickstart/#check-if-an-item-is-a-source-event","title":"Check if an item is a source event","text":"<p>is_source_event = monty_ext.is_source_event()</p>"},{"location":"getting-started/quickstart/#check-if-an-item-is-a-source-hazard","title":"Check if an item is a source hazard","text":"<p>is_source_hazard = monty_ext.is_source_hazard()</p>"},{"location":"getting-started/quickstart/#check-if-an-item-is-a-source-impact","title":"Check if an item is a source impact","text":"<p>is_source_impact = monty_ext.is_source_impact()</p>"}]}